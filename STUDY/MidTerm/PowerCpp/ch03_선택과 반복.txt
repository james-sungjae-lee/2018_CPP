챕터 3 : 선택과 반복

차례
1. if 문
2. switch 문
3. while 문
4. for 문
5. break 와 continue 문

학습 목표
if, switch 등의 조건문을 학습한다.
whil, for 등의 반복문을 학습한다.
break, continue 등의 역할을 살펴본다.

1. if 문

일반적으로 프로그램의 각 문장들은 위에서 아래로 순차적으로 실행된다. 하지만 제어문
control statement 를 사용하게 되면 조건에 의하여 문장들의 실행 순서를 변경할 수 있다.

제어문은 크게 2가지로 나누어진다. 하나는 조건에 따라서 여러 개의 실행 경로 가운데 하나
를 선택해야 하는 경우에 사용되는 조건문이다. if-else 문장과 switch 문장이 여기에 해당
된다. 또 하나는 조건이 유지되는 한, 혹은 정해진 횟수만큼 처리를 되풀이하는 문장인데 이
를 반복문이라고 부른다. for 문장과 while 문장이 반복문에 속한다. 그림 3-1 은 프로그램에
서 나타나는 3가지의 제어 구조인 순차 구조, 선택 구조, 반복 구조를 나타낸다.

선택이나 반복의 조건은 조건식으로 표현된다. 조건식이란 수식의 값이 참 또는 거짓인 수식
을 말한다. 조건식에서는 주로 > 나 < 와 같은 관계 연산자나 && 나 || 같은 논리 연산자가
사용된다.

- if-else 문
if-else 문은 다음과 같은 형식을 가진다.

if(조건식)
  문장 1; 조건식이 true 이면 실행
else
  문장 2; 조건식이 false이면 실행

만약 조건식이 참으로 계산되면 문장1이 실행되고 거짓으로 계산되면 문장2가 실행된다.
if-else에서 조건식의 값이 참일 때 실행되는 블록을 then 절 then clause 라고 하고,
식의 값이 참이 아닐 때 실행되는 블록을 else절 else clause 라고 한다.

만약 점수가 60점 이상이면 합격이고, 60점 미만이면 불합격이라면 다음과 같이 코드를 짤 수 있다.

if(grade >= 60){
cout << "합격입니다.\n";
}else{
  cout << "불합격입니다.\n";
}

여기서 else 절은 생략될 수도 있다. 이 경우를 if-then 구조라고 한다.

if-then 구조는 다음과 같다
if(grade >= 60){
cout << " 합격입니다. \n "
}

만약 조건에 따라 두 개 이상의 문장이 실행되어야 한다면, 어떻게 해야 하는가?
이러한 경우에는 다음과 같이 중괄호를 이용하여 문장들을 묶어서 한꺼번에 실행시킬 수 있다.
이러한 문장 그룹핑을 복합문(compound statement) 또는 (block) 이라고 한다.
복합문은 하나의 작업으로 분류될 있는 문장들을 묶는데 사용된다. 복합문은 단일문이 들어갈 수 있는
곳이면 어디나 단일문 대신 넣을 수 있다. 예를 들어 성적이 60점 이상이면 합격이고 동시에 장학금
도 받는다면 다음과 같이 프로그램 할 수 있을 것이다. 이 경우 만약 grade 의 값이 60보다
크거나 같으면 중괄호에 싸인 두 개의 문장이 실행된다.

if(grade > = 60){
 cout << " 합격입니다. ";
 cout << " 장학금도 받을 수 있습니다.";
}else{
  cout << " 불합격입니다. "
  cout << " 장학금을 받을 수 없습니다. "
}

- 조건 연산자( ? : )

간단한 if-else 문은 조건 연산자를 사용하여 표현할 수 도 있다. 즉 60점 이상이면 합격을,
60점 미만이면 불합격을 출력하는 if-else 문은 다음과 같이 조건 연산자를 사용하여 작성
할 수 도 있다.

cout << (grade >= 60? "합격"  : "불합격")

그러나 조건 연산자는 if-else 문에 비하여 이해하기 어렵기 때문에 아주 간단한 경우에만
사용되어야 한다.


-- 예제
하나의 예로 시간제 임금을 계산해보자. 8시간까지는 시간당 5000원이고 8시간초과분에 대해서는
1.5 배를 지급한다면 다음과 같이 임금을 계산할 수 있다.

pay.cpp
#include <iostream>
using namespace std;

int main(){
  const int RATE = 5000;
  int pay;
  int hours;

  cout << 시간을 입력하시오
  cin >> hours;

  if(hours > 8){
  pay = RATE * 8 + (int)(1.5 * RATE * (hours - 8))
  }
}

- 중첩 if문
if문도 하나의 문장이다. 따라서 if-else 문의 문장1이나 문장2 자리에 다른 if문이 들어가는
경우도 있다. 이것을 중첩 if문이라고 한다.

 if(grade >= 80)
  if(grade >= 90){
  cout 당신의 학점은 A
  }else{
  cout 당신의 학점은 B
  }

만약 grade 가 80보다 크거나 같으면 2 위치의 if-else 문이 실행된다. 그렇지만 여기서는 해석상의
문제가 발생할 수 있다. else 절이 1위치의 첫 번째 if 와 매치되는 것인가, 아니면 2 위치의 두 번째
if와 매치되는 것인가?
이것을 해결하기 위하여 하나의 규칙이 존재한다. else 절은 가장 가까운 if와 매치된다.
이것을 확실하게 하려면 중괄호를 사용하여 묶어주면 된다.

- 연속적인 if문

가끔 우리는 여러 가지의 조건에 의하여 다중으로 분기되는 결정을 내려야 하는 경우가 있다.
이 경우 가장 자연스러운 방법은 if문 다음에 else if 문을 계속적으로 사용하는 것이다.
만일 하나의 조건식이 참이면 관련된 문장이나 블록이 수행되고 더 이상의 비교는 이루어지지 않는다.
다음의 예제에서 시험 성적에 따라서 학점을 부여하는 것을 이러한 구조를 사용하여
코딩하였다. 즉 90점 이상이면 A학점, 80점에서 89점은 B학점, ~~~~ 이러한 코드는 다음과 같다.

if(grade >= 90){
cout A
}else if(grade >= 80){
  cout B
},,,
else{
  cout F
}

예제 2
간단한 예제로 사용자로부터 과세 표준 금액을 받아서 근로 소득세를 계산하는 프로그램을 작성해보자
과세 구간에 따라 연속적인 if문을 사용하여서 프로그램을 작성하였다.

- switch 문

switch 문은 여러 개의 가능한 실행 경로 중에서 하나를 선택하는데 사용된다. switch 문은
 switch 안에 들어 있는 수식을 계산하여서 case 절과 비교한다. 일치하는 case 절이 있으면
 case 절의 문장들이 실행되다가 break 문에 도달하면 종료된다. 만약 case 절에서 일치하는
 정수값을 찾지 못하면 최종적으로 default절이 실행된다. switch 문은 정수형에 대해서만 동작
 하는 것에 유의하라.

 예를 들어서 정수를 입력받아서 한글로 출력하는 프로그램을 살펴보자. 만약 사용자가 1을 입력하였다면
 화살표와 같은 순서를 거쳐서 실행된다.

여기서 주의해야 할 점은 break 문이 없으면 선택된 case 절 안의 문장들을 실행한 다음, 계속해서 다음
case 절의 문장들을 실행하게 된다는 것이다.

default 문은 어떤 case 문과도 일치되지 않는 경우에 선택되어 실행된다. default 문은
없을 수도 있다. 만약 default 문이 없고 일치하는 default 문이 없고, 일치하는 case 문도
없다면 아무 것도 실행되지 않고 switch 문 다음 문장으로 이어진다. 미처 예상하지 못한 값을 알아내기
위하여 가급적 default 문을 포함시키는 것이 좋다.

switch 문과 연속적인 if-else 문
siwtch 문의 순서도를 보면 연속적인 if-else 문과 아주 유사한 것을 알 수 있다. 따라서
switch 문은 연속적인 if-else 문으로 변환할 수 있다. 앞의 코드도 다음과 같이 연속적인 if-else
구조를 사용하여 다시 작성할 수 있다.

if(number == 0)
  cout << "없음";
else if()~~~
else if~~~
else~~~

둘 중에서 어떤 것을 사용해도 상관없는 경우가 많지만, 선택해야 하는 경우의 수가 많아지면
(대략 5개 이상이 되면) switch 문을 사용하는 것이 간결해 보인다. 일반적으로 조건으로 값의 범위를
나타내는 경우에는 swtich 문을 사용할 수 없다. 이 때는 반드시 if-else 문을 사용해야 한다.

예제
1년의 각 달의 일수를 출력하는 프로그램을 작성하여 보자. 즉, 특정 달이 입력되면 그 달의 일수를
출력한다. 여러 가지 방법으로 작성할 수 있겠으나, 여기서는 switch 문을 사용해보자. 대부분의
달이 31일 또는 30일인 점을 고려하여 break를 생략하는 기법을 사용하도록 하자.

03_mid1
: case 절에서 break 문을 생략하면?
-> 해당 case 절 부터 break 문이 나타날 때 까지 실행하며, break 문이 전혀 없을 경우에는
끝까지 실행 한 다음, 다음 문장으로 넘어간다.

03_mid2
: fruit 값이 1, 2, 5일 때의 다음 코드의 출력은?
1 : 사과
2 : 배, 바나나
5 : 과일


- while 문

반복 처리는 같은 처리 과정을 여러 번 되풀이하는 것이다. 반복 처리는 왜 필요한가? 학생들의
국어, 영어, 수학 성적의 평균을 구하는작업을 생각하여 보자. 학생 수가 30명이라면 각
학생들의 국어, 영어, 수학 성적을 합하여 3으로 나누는 처리 과정을 30번 반복하여야 할 것이다.
만약 학생 수가 10000명이라면 10000번을 반복하여야 하고, 이러한 반복적인 작업을
사람이 하는 것은 아주 비효율적이다. 여기에 컴퓨터의 강점이 있다. 컴퓨터는 인간이 수행할 경우
막대한 시간이 소요되는 반복 작업을 빠르고 정확하게 처리할 수 있다.
이와 같이 어떤 대상에 대하여 같은 처리 과정을 반복하는 것은 프로그래밍에 있어서 자주 발생한다.

> 반복문의 종류
c++ 에서 지원하는 반복문에는 크게 나누어 while 문과 for 문이 있다. while 문은 조건이 만족되면
반복을 계속하는 구조이다. while 문은 미리 반복 횟수를 알 수 없고, 조건에 따라서
반복하는 경우에 사용한다. for 문은 정해진 회수만큼 반복하는 경우에 사용한다.

달리기 운동의 경우
for문 : 100바퀴 돌 때까지 달리세요
while문 : 10kg 이 빠질 때 까지 달리세요.

> while 문

while 문은 조건식이 참이면 문장들의 블록을 반복적으로 실행한다. while 문의 문법은 다음과 같다.
while (조건식){
  반복문장
}

조건식을 계산하면 참 또는 거짓을 반환하게 된다. 만약 조건식이 참 true 로 계산된다면 반복문장을 실행한다.
조건식이 거짓으로 계산될 때까지 조건식의 계산과 반복문장의 실행을 계속한다. 예를 들어 0부터 4까지의
정수값을 출력하려면 다음과 같이 한다.

어떤 경우에는 무한히 반복되는 루프가 필요한 경우가 있다. 예를 들어서 통신 채널로부터 데이터를
받는 기기의 경우에는 전원이 켜있는 한 무한히 반복하여야 한다. 무한 루프는 다음과 같이
조건식을 true 로 적으면 된다.
while(true){
  무한반복의 코드 작성
}

예제 #1
반복문을 사용하여서 구구단을 출력하여 보자.

여기서는 먼저 사용자로부터 출력하고 싶은 구구단의 단수를 받아서 변수 n에 저장한다. 여기서의 루프 제어변수는
i이다. i의 초기값이 0이 아니고, 1인 것에 유의하라. 구구단은 1부터 곱해야 하기 때문에 0이 아니고
1로 초기화를 하였다. 그리고 반복 루프도 9보다 작거나 같을 때까지 반복하도록 하였다.

예제 #2
이번 예제에서는 while 루프를 이용하여 두 개의 정수의 최대 공약수를 구해보자. 최대 공약수란
두 개의 정수의 공통 약수 중에서 가장 큰 수를 의미한다. 예를 들어서 9과 12의 최대 공약수는
4가 된다. 왜냐하면 4는 8의 약수이면서 12의 약수이고, 공통 약수 중에서 갖아 크기 때문이다.
최대 공약수를 구하려면 아무래도 정교한 알고리즘이 필요하다. 최대 공약수를 구하는 알고리즘은 기원전
300년에 이미 유클리드에 의하여 개발되었다. 따라서 여기서는 그 알고리즘을 구현하는데만 초점을 맞추자.

1. 두 수 가운데 큰 수를 x, 작은 수를 y라 한다.
2. y가 0이면 공약수는 x 이며 종료한다.
3. r <- x % y
4. x <- y
5. y <- r
6. 2로 되돌아간다.

위의 의사 코드에서 변수에 값을 대입하는 연산을 <- 로 표기하였다. 의사 코드에서는 화살표가
대입 연산을 나타낸다. 위의 알고리즘의 원리에 대해서는 신경 쓰지 말자. 중요한 것은 위의
알고리즘을 프로그램으로 변환하는 것이다. 알고리즘을 자세히 살펴보면 반복 구조가 있음을 알 수 있다.
반복 횟수가 결정되어 있지 않으므로 while 루프를 사용하도록 하자. y가 0이 아니면 단계 3, 4, 5를
반복하면 된다. 따라서 다음과 같은 프로그램을 얻을 수 있다.

> do-while 문

do-while 문은 while 문과는 반대로 먼저 반복 문장을 실행하고 조건을 나중에 검사하는
반복 구조이다. do-while 문의 형식은 다음과 같다.

do{
  반복 문장;
}while(조건식);

do-while 과 while 의 차이점은 do-while 은 조건식을 루프 구조의 바닥에서 계산한다는 점이다.
따라서 do 블록 안에 있는 문장을 적어도 한 번은 실행한다. 아래의 예에서 i의 값은 10으로
명백히 3보다 작지 않다. 하지만 먼저 문장을 실행한 후에 조건식을 검사하기 때문에 한 번은 실행된다.

do-while문은 데이터를 처리하기 전, 사용자로부터 메뉴나 데이터를 입력을 받아야 하는 경우에
많이 사용된다.

예제 #3
if 문과 do-while 문을 동시에 사용하는 예제를 작성하여 보자. 이 예제는 숫자 알아맞히기 게임이다.
프로그램은 1부터 100사이의 정수를 저장하고 있고, 사용자는 질문을 통하여 그 정수를 알아맞히려고
노력한다. 사용자가 답을 제시하면 프로그램은 자신이 저장한 정수와 비교하여 제시된 정수가 더 높은지 낮은지
만을 알려준다. 프로그램은 do-while 문을 이용하여 사용자가 정확하게 정수를 알아맞힐 때 까지 반복한다.
사용자가 정답을 단 몇번만에 알아맞혔는지 출력한다. 사용자가 제시한 정수와 정답을 비교하는데 if 문이 사용된다.

해설
3개의 변수가 선언되어 사용된다. answer 는 정답을 저장하고 있다. 현재 정답은 고정되어 있으나,
난수 발생기를 사용한다면 실행할 때마다 무작위로 숫자를 결정할 수 있다.
변수guess 에는 사용자가 입력한 정수가 저장된다. 만약 answer 와 guess 가 일치하면 반복이 종료된다.
tries 는 사용자의 시도 횟수를 기록한다.
반복 루프는 do-while 루프를 이용하여 구현되었다. 먼저 사용자로부터 정수를 받아야 하기 때문에 정수를 cin을
통해서 받은 후에, 이것을 answer에 저장된 정수와 비교한다. if문을 사용하여 guess 가 answer 보다 작은지
큰지를 검사하여 적당한 메시지를 출력한다. do-while 루프의 마지막 조건 검사 부분에서 guess 가 answer 와
같은지를 검사한다. 만약 guess가 answer 와 같으면 반복을 중단하고 시도 횟수를 출력한 다음 종료한다.


>> 중간점검

1. 출력: 10 7 4 1
2. do while 로 변경시?
-> do{
  cout << n;
  n = n-3;
}while(n > 0)
에서, 우선 n = n-3 을 실행하므로 10 7 4 1 이 출력된다.

> for 문

for 문은 일정한 횟수만큼 반복할 때 유용하게 사용된다. 흔히 for 루프라고 부른다. 왜냐하면 특정한
조건이 만족될 때 까지 반복적으로 루프를 돌기 때문이다. 일반적인 형식은 다음과 같다.

for(초기식; 조건식; 증감식){
문장들;
}

초기식은 루프를 초기화한다. 루프가 시작될 때 딱 한 번 실행된다.
만약 조건식이 거짓으로 계산되면 루프는 종료하게 된다.
증감식은 한 번의 반복 뒤에 실행된다. 대개 증감식은 루프 제어 변수를 증가시키거나
감소시키게 된다. 루프 제어 변수란 루프를 제어할 목적으로만 사용하는 변수이다.

다음 프로그램은 for문을 사용하여 0부터 4까지의 숫자를 화면에 출력한다.

유의할 점은 초기식 안에서 변수를 선언하는 방법이다. 이 변수의 범위는 선언된 위치에서부터 for 블록의
끝까지이다. 따라서 이 변수는 조건식과 증감식에서 사용될 수 있다. 만약 이 변수가 for 블록의 외부에서는
필요하지 않다면, 초기식 안에서 변수를 선언하는 것이 좋다. 통상적으로 i, j, k와 같은 이름들이 루프를
제어하는데 많이 사용된다. 이들 변수를 초기식 안에 선언하는 것은 변수의 생존 범위를 제한하고 따라서 요류를
줄이게 된다. for 루프에서 초기식이나 조건식, 증감식은 생략이 가능하다. 따라서 조건이 없이 무한히 반복하는
루프는 다음과 같이 생성될 수 있다.

for( ; ; ){
  무한 반복할 문장;
}

예제
간단한 예로 1부터 10까지의 정수를 더하여 합을 구하는 프로그램을 살펴보자.

프로그램 설명
이 프로그램에서는 두 개의 정수 변수가 필요하다. sum 은 정수들의 합을 저장한다. i는 for 문에서
필요한 변수로, for 문이 정해진 횟수만큼 실행할 수 있도록 지금까지의 실행 횟수를 저장하고 있는 변수가 된다.
for 문에서 첫 번째 단계인 초기화 문장은 i = 1 이다. 즉, 변수 i의 초기값을 1로 만드는 것이다.
for 문의 두 번째 단계는 i <= 10 이다. 이것은 변수 i 가 10보다 작거나 같은지를 검사한다.
i 는 1로 초기화 되어 있으므로 조건은 참이 되고, sum += i ; 문장이 실행되어 sum 에 1이 더해진다.
다시 증감 문장인 i++ 가 실행되고 i 의 값은 2가 된다. 다시 조건 i <= 10이 검사되고 참이므로
다시 sum+= i; 문장이 실행되어 sum 에 2가 더해진다. for 문은 조건식이 거짓이 될 때까지 계속 실행되고
i 가 11이 되면 조건식이 거짓이 된다. 조건식이 거짓이 되면 for 문이 끝나게 되고 for 문 아래에 있는
print 가 작동되며 sum 이 출력된다.

예제
이번 예제에서는 팩토리얼 값을 계산하여 보자. 팩토리얼이란 다음과 같이 정의된다.

n! = 1 x 2 x 3 x ... x n

> 중첩 반복문
반복문은 중첩되어 사용될 수 있다. 즉, 반복문 안에 다른 반복문이 실행될 수 있다. 이러한 형태를
중첩 반복문 nested loop 라고 한다. 외부에 위치하는 반복문을 바깥쪽 반복문 outer loop 라고 하며,
내부의 반복문을 안쪽 반복문 inner loop 라고 한다. 안쪽 반복문은 바깥쪽 반복문이 한 번 반복할 때마다
새로 실행된다.

중첩 반복문에서 가장 주의할 점은 각각의 반복문을 제어하는 변수가 달라야 한다는 점이다.
그림 에서도 바깥쪽 반복문을 제어하는 변수는 i 이고 내부를 제어하는 변수는 j로 서로 다르다.
만약 같은 변수가 사용되면 논리적인 오류가 발생할 가능성이 높다.

예제
중첩 반복문은 실제 프로그래밍에서 많이 나오는 형태로, 특히 사각형과 비슷한 데이터를 처리하는데 유용하다.
다음 예제는 * 기호를 사각형 모양으로 출력한다. 여기서는 반복문으로 for 루프를 사용하여 보자.
주의할 점은 외부의 for 루프가 반복시키는 문장이 2개 이상이기 때문에 반드시 이들을 중괄호로 묶어서
블록으로 만들어 주어야 한다. 그렇지 않으면 외부 for 문은 바로 아래에 위치한 문장만 반복할 것이다.

Q&A
3 가지의 반복문 for, while, do-while 중에서 어떤 것을 사용해야 하는가?
A : 부분적으로는 개인적인 취향의 문제이다. 일반적인 선택 기준은 for 루프이다. 루프의 반복 횟수를
아는 경우에는 for 루프가 while 루프에 비하여 약간 더 편리하다고 할 수 있다. 즉, 루프 제어 변수를
증가하는 것을 잊어버린다거나 하는 일이 while 루프에 비하여 덜 발생한다. 만약 조건만 존재하고 정확한
반복 횟수를 모르는 경우에는 while 구조가 좋다.
또한 while 과 for는 반복하기 전에 조건을 검사하는 구조이고, do- while 은 먼저 실행한 후에
반복 조건을 검사한다. 특별한 경우가 아닌 일반적인 경우에는 반복을 하기 전에 조건 검사를 하는 것이 좋다.
뭐든지 실행하기 전에 면밀하게 사전 조사를 하는게 좋다.

>> 중간 점검
1. 다음 코드의 출력
2 4 6 8

2. 다음 코드의 출력
Student 10 / 8 / 6 / 4 / 2

3. 다음 코드의 출력
1 x 5 부터 5 x 1까지 구구단.


5. break 와 continue 문

> break 문

break 문은 반복 루프를 벗어나기 위하여 사용한다. 반복 루프 안에서 break 문이 실행되면
반복 루프는 즉시 중단되고 반복 루프 다음에 있는 문장이 실행된다. 예를 들어 다음의 반복 루프는
원래는 1부터 99까지의 정수를 출력하여야 하지만 break 문 때문에 1부터 10까지의 정수만을 출력한다.

break 문은 원하는 만큼 얼마든지 둘 수 있다. 그러나 break 문을 너무 많이 사용하게 되면
코드가 난해해진다. 따라서 특수하게 반복 루프를 중단할 경우에만 break 문을 사용하는 것이 좋다.
한 가지 주의할 점은 중첩 반복 루프에서 break 문을 사용하게 되면 내부의 반복문에만 영향을 끼친다는 점이다.

예제 1.
여기서는 무한 루프를 만들어서 사용자로부터 입력받은 실수의 제곱근을 구하여 출력하는 프로그램을 작성한다.
허수는 생각하지 않는다고 하면 제곱근은 양의 실수에 대해서만 계산할 수 있다. 그러므로 만약 입력된 값이
음수이면 무한 루프를 종료하도록 하자. 무한 루프를 종료하는데 break 문을 쓴다.

예제 : 03_square_root.cpp

프로그램 설명
1은 항상 참이므로 while(1) 은 무한 루프가 된다.
반복되는 문장은 중괄호로 둘러싸인 복합문이 된다.
사용자로부터 실수를 입력받아서 변수 v 에 저장한다.
만약 변수 v 가 0.0보다 작으면 제곱근을 구할 수 없으므로 break 문을 실행하여 루프를 빠져 나간다.
sqrt() 함수를 호출하여 제곱근을 계산한다. sqrt() 는 double 형 실수를 받아서 제곱근을 계산하는
라이브러리 함수이다.

예제 2.
학생들의 점수를 입력받아서 프로그램을 작성한다. 학생들의 수를 미리 정하지 않고 음수가 입력되면
종료되는 것으로 한다.


> continue 문

continue 문은 break 문과는 약간 반대되는 동작을 한다. continue 문은 현재 수행하고 있는
반복 과정의 나머지를 건너뛰고 다음 반복 과정을 강제적으로 시작하게 만든다. 반복 루프에서 continue 문을
만나게 되면 continue 문 다음에 있는 후속 코드들은 실행되지  않고 건너 뛰게 된다.
만약 루프가 중첩되어 있는 경우에는 continue 를 포함하고 있는 내부 루프 구조만 영향을 받는다.
continue 문은 3가지의 반복 구조에서 미묘한 차이를 보인다.

0부터 100까지의 정수 중에서 짝수들만의 합을 구하는 예제를 가지고 설명하여 보자. while 에서는
continue 문장이 반복의 조건 검사 부분으로 직접 가게 만들어서 다음 반복 과정을 시작한다.
i 를 2로 나누어서 나머지가 1이면 홀수이므로 이 경우에는 continue 문을 사용하여 후속 문장인
sum += i ; 를 실행하지 않고 조건식인 i < 100 을 계산하게 된다. 계산 결과에 따라서 반복을
계속하거나 종료하게 된다.

예제 1.
사용자로부터 알파벳 소문자를  받아서 대문자로 바꾸는 다음의 프로그램을 살펴보자
만약 사용자로부터 받은 문자가 소문자가 아니면 사용자로부터 다시 문자를 입력하도록 만든다.
만약 사용자가 Q를 입력하면 반복을 종료한다.


중간 점검
1. 다음 코드의 출력은?
10 8
2. break -> continue
10 8 4 2 0


Exercise

1. 다음의 작업을 수행하는 문장을 작성하라.
1-1 : if(age >= 20 && age <= 65)count ++;
1-2 : if(x > y){max = x ; min = y;}else{max = y; min = x}
1-3 : if(1 < x && x < 20){x = y};

2. 아래와 같이 변수들이 선언되어 있는 경우, 다음은 참인가 거짓인가?
2-1 : 참
2-2 : (오류?)
2-3 : 참
2-4 : 참

3. 다음 문장의 오류를 찾아서 수정하라.
3-1 : 0 < age < 18 은 0 < age && age < 18 로 고쳐야 한다.
3-2 : grade 를 비롯한 case 들은 정수로 떨어져야 한다.
3-3 : break 를 작성하지 않았다.

4. x, y, z의 최종값은?
x = 1, y = 2, z = 3

5 다음 프로그램의 결과는?
5-1 : 10 9 8 7
5-2 : 10 9 8 7
5-3 : 노의미
5-4 : 0 1 2 3 4 5 6 7 8 9

6. 다음의 수학식을 계산하는 코드를 작성하라.

int main(void){

}
